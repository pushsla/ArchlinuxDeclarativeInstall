#!/usr/bin/python
import json
import subprocess
from pathlib import Path


supported_initrams = {
    'booster': lambda kern: '/boot/booster-'+kern+'.img',
}

supported_ucodes = {
    'intel-ucode': '/boot/intel-ucode.img',
    'amd-ucode': '/boot/amd-ucode.img',
}


def run_command(cmd: str, args: list, nofail=False) -> int:
    args = list(filter(lambda x: x != "", args))
    print("EXEC: "+' '.join([cmd] + args))
    p = subprocess.Popen(' '.join([cmd] + args), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    result = p.wait()
    output, err = p.communicate()
    if err:
        print(err.decode('utf-8'))
    if not nofail and result != 0:
        raise Exception("Command Error!")
    return result


with open('/usr/local/share/adi/your_system.json', 'r') as file:
    options = json.load(file)

kernel = options['configData']['system']['kernel']
kernelpath = '/boot/vmlinuz-'+kernel
initram = options['configData']['system']['initram']
initrampath = ''
ucode = options['configData']['system']['ucode']
ucodepath = ''
uki = options['use_uki']
ukipath = options['configData']['system']['bootloader']['efistub_dir']

if not uki:
    print("Could not perform EFISTUB UKI Transaction with use_uki={}".format(uki))
    exit(0)

if initram in supported_initrams.keys():
    initrampath = supported_initrams[initram](kernel)
else:
    print("Could not perform EFISTUB for {} image generator".format(initram))
    exit(1)

if ucode in supported_ucodes.keys():
    ucodepath = supported_ucodes[ucode]
else:
    print("Could not add Miscocode for {}".format(ucode))

if not (Path(kernelpath).is_file() and Path(initrampath).is_file()):
    print("Can not find kernel {} or initramfs {}".format(kernelpath, initrampath))
    exit(1)

if ucodepath:
    newinitrampath = '.'.join(initrampath.split('.')[:-1])+"-"+ucode+".img"
    run_command('cat', [ucodepath, initrampath, '>', newinitrampath])
    initrampath = newinitrampath

uki_params = [
    '--add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000',
    '--add-section .cmdline="/etc/kernel/cmdline-{}" --change-section-vma .cmdline=0x30000'.format(kernel),
    '--add-section .linux="{}" --change-section-vma .linux=0x2000000'.format(kernelpath),
    '--add-section .initrd="{}" --change-section-vma .initrd=0x3000000'.format(initrampath),
    '"/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "{}{}.efi"'.format(ukipath, kernel)
]

run_command('mkdir', ['-p', ukipath])
run_command('rm', ['-f', ukipath+'/'+kernel+'.efi'], nofail=True)
run_command('objcopy', uki_params)
