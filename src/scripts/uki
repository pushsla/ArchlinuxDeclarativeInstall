#!/usr/bin/python
import json
import subprocess
from pathlib import Path
import re

targets = []

while line := input():
    if re.match(r'usr/lib/modules/([^/])+/(pkgbase|vmlinuz)', line):
        kver = line.split('/')[3]
        kver = '-'+ksplit[3] if len(ksplit := kver.split('-')) == 4 else ''
        targets.append('linux'+kver)


_known_initrams = {
    'booster': {
        'img': lambda kern: '/boot/booster-'+kern+'.img',
        'kern': lambda kern: '/boot/vmlinuz-'+kern
    },
    'mkinitcpio': {
        'img': lambda kern: '/boot/initramfs-'+kern+'.img',
        'kern': lambda kern: '/boot/vmlinuz'+kern
    }
}

_known_ucodes = {
    'intel-ucode': '/boot/intel-ucode.img',
    'amd-ucode': '/boot/amd-ucode.img',
}


def run_command(cmd: str, args: list, nofail=False) -> int:
    args = list(filter(lambda x: x != "", args))
    print("EXEC: "+' '.join([cmd] + args))
    p = subprocess.Popen(' '.join([cmd] + args), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    result = p.wait()
    output, err = p.communicate()
    if err:
        print(err.decode('utf-8'))
    if not nofail and result != 0:
        raise Exception("Command Error!")
    return result


with open('/usr/local/share/adi/your_system.json', 'r') as file:
    _options = json.load(file)

_system = _options['configData']['system']

initram = _system['initram']
ucode = _system['ucode']
uki = _system['bootloader']['uki']['use_uki']
ukipath = _system['bootloader']['uki']['gen_dest']

if not uki:
    print("Could not perform EFISTUB UKI Transaction with use_uki={}".format(uki))
    exit(0)

if initram in _known_initrams.keys():
    initrampath_f = _known_initrams[initram]['img']
    kernelpath_f = _known_initrams[initram]['kern']
else:
    print("Could not perform EFISTUB for {} image generator".format(initram))
    exit(1)

ucodepath_f = ''
if ucode in _known_ucodes.keys():
    ucodepath_f = _known_ucodes[ucode]
else:
    print("Could not add Microcode for {}".format(ucode))


for kernel_data in _options['configData']['system']['kernels']:
    kernel = kernel_data['version']
    if kernel in targets:
        kernelpath = kernelpath_f(kernel)
        initrampath = initrampath_f(kernel)
        ucodepath = ucodepath_f

        if not (Path(kernelpath).is_file() and Path(initrampath).is_file()):
            print("Can not find kernel {} or initramfs {}".format(kernelpath, initrampath))
            continue

        if ucodepath:
            newinitrampath = '.'.join(initrampath.split('.')[:-1])+"-"+ucode+".img"
            run_command('cat', [ucodepath, initrampath, '>', newinitrampath])
            initrampath = newinitrampath

        uki_params = [
            '--add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000',
            '--add-section .cmdline="/etc/kernel/cmdline-{}" --change-section-vma .cmdline=0x30000'.format(kernel),
            '--add-section .linux="{}" --change-section-vma .linux=0x2000000'.format(kernelpath),
            '--add-section .initrd="{}" --change-section-vma .initrd=0x3000000'.format(initrampath),
            '"/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "{}/{}.efi"'.format(ukipath, kernel)
        ]

        run_command('mkdir', ['-p', ukipath])
        run_command('rm', ['-f', ukipath+'/'+kernel+'.efi'], nofail=True)
        run_command('objcopy', uki_params)
